<launch>
    <arg name="simu" default="true" />
    <arg name="H" default="50.0" />
    <!-- 如果不是仿真环境，则使用实际的 PX4 硬件 -->
    <group unless="$(arg simu)">
        <arg name="fcu_url" default="/dev/ttyACM0:921600" />
        <arg name="gcs_url" default="udp://:14509@192.168.144.8:14579" />
        <arg name="tgt_system" default="1" />
        <arg name="tgt_component" default="1" />
        <arg name="log_output" default="screen" />
        <arg name="fcu_protocol" default="v2.0" />
        <arg name="respawn_mavros" default="false" />
        <!-- 启动 PX4 -->
        <include file="$(find mavros)/launch/px4.launch" >
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs_url)" />
            <arg name="tgt_system" value="$(arg tgt_system)" />
            <arg name="tgt_component" value="$(arg tgt_component)" />
            <arg name="log_output" value="$(arg log_output)" />
            <arg name="fcu_protocol" value="$(arg fcu_protocol)" />
            <arg name="respawn_mavros" value="$(arg respawn_mavros)" />
        </include>
    </group>
    <!-- 如果是仿真环境，则使用 PX4 SITL 模拟器 -->
    <group if="$(arg simu)">
        <include file="$(find px4)/launch/mavros_posix_sitl.launch">
        </include>
    </group>
    <!-- 启动状态机 -->
    <node pkg="fsm" type="fsm_node.py" name="fsm_node" output="screen">
        <param name="some_parameter" value="10.0"/>
    </node>
    <!-- 初始化检查节点 -->
    <node pkg="fsm" type="init_check_node.py" name="init_check_node" output="screen">
        <param name="some_parameter" value="10.0"/>
    </node>
    <!-- 启动起飞节点-->
    <node pkg="uav_control" type="takeoff_node.py" name="takeoff_node" output="screen">
        <param name="target_height" value="50"/>
        <param name="alt_tolerance" value="0.2"/>
    </node>
    <!-- 启动无人机轨迹控制节点 -->
    <node pkg="uav_control" type="decoupled_velocity_yaw_controller_node.py" name="decoupled_velocity_yaw_controller_node" output="screen">
        <param name="target_z" value="55"/>
        <rosparam param="kp">[0.5, 0.5, 0.5]</rosparam>
        <rosparam param="kv">[0.8, 0.8, 0.6]</rosparam>
        <rosparam param="T">[2, 2, 2]</rosparam>
    </node>

    <!-- 启动轨迹生成节点 -->
    <!-- <node pkg="uav_control" type="traj_gen_node.py" name="traj_gen_node" output="screen">
        <param name="H" value="$(arg H)" />
        <rosparam param="dir">[-1.0, 0.0, 0.0]</rosparam> 
    </node> -->

        <!-- 启动轨迹生成节点 -->
    <node pkg="uav_control" type="traj_gen_with_fsm_node.py" name="traj_gen_node" output="screen">
        <param name="H" value="$(arg H)" />
        <rosparam param="dir">[-1.0, 0.0, 0.0]</rosparam> <!-- 方向向量,仅前两维有效 -->
    </node>

    <!-- 启动无人船状态观测节点 -->
    <arg name="rate" default="20.0" />
    <arg name="Q_scale" default="0.01" />
    <arg name="R_scale" default="1.0" />

    <node name="target1_observer" pkg="usv_observe" type="kalman_observer_node.py" output="screen">
        <param name="target_id" value="1" />
        <param name="rate" value="$(arg rate)" />
        <param name="Q_scale" value="$(arg Q_scale)" />
        <param name="R_scale" value="$(arg R_scale)" />
    </node>
    <node name="target2_observer" pkg="usv_observe" type="kalman_observer_node.py" output="screen">
        <param name="target_id" value="2" />
        <param name="rate" value="$(arg rate)" />
        <param name="Q_scale" value="$(arg Q_scale)" />
        <param name="R_scale" value="$(arg R_scale)" />
    </node>
    <!-- 启动 LLA → ENU 服务 -->
    <node name="lla2enu_server" pkg="uav_srv" type="lla2enu_server.py" output="screen" />
    <!-- 启动 获取初始 LLA 的服务节点 -->
    <node name="get_init_lla_server" pkg="uav_srv" type="get_init_lla_server.py" output="screen" />

    
    
</launch>
